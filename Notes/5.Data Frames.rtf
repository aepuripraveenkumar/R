** Data Frames
   ----------------------------
   -->* Vectors (one dimensional array): can hold numeric, character or logical values. The elements in a vector all have the same data type.
   
   -->* Matrices (two dimensional array): can hold numeric, character or logical values. The elements in a matrix all have the same data type.
   
   -->* Data frames (two-dimensional objects): can hold numeric, character or logical values. Within a column all elements have the same data type, 
        but different columns can be of different data type.
   
   We know that matrices that all the elements that you put in a matrix should be of the same type.

   A data frame has the variables of a data set as columns and the observations as rows. 
   
   This will be a familiar concept for those coming from different statistical software packages such as SAS or SPSS.

   Ex:
	> mtcars    # It is built-in R data frame
			     mpg  cyl disp  hp drat    wt  qsec  vs am gear carb
	Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
	Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
	Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
	Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
	Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
	Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1


** The head() and tail() functions
   -------------------------------------------------
   The function head() enables you to show the first observations of a data frame. 
   Similarly, the function tail() prints out the last observations in your data set.

   Ex:  head(mtcars)

   Ex:  tail(mtcars)


** str() function
   ------------------
   The function str() shows you the structure of your data set. 
   Applying the str() function will often be the first thing that you do when receiving a new data set or data frame. 
   It is a great way to get more insight in your data set before diving into the real analysis.
   
   Ex:
         > str(mtcars)
	'data.frame':	32 obs. of  11 variables:
	 $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
	 $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
	 $ disp: num  160 160 108 258 360 ...
	 $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
	 $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
	 $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
	 $ qsec: num  16.5 17 18.6 19.4 17 ...
	 $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
	 $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
	 $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
	 $ carb: num  4 4 1 1 2 1 4 2 2 4 ...


** Creating a data frame
   ----------------------------------------
   You construct a data frame with the data.frame() function. As arguments, you pass the vectors from before: 
   they will become the different columns of your data frame. Because every column has the same length, 
   the vectors you pass should also have the same length. But don't forget that it is possible (and likely) that they contain different types of data.

Ex: 
	# Definition of vectors
	name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
	type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", 
		  "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
	diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
	rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
	rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)

	# Create a data frame from the vectors
	planets_df <- data.frame(name, type, diameter, rotation, rings)
        
	# Print

	> planets_df        # The planets_df data frame should have 8 observations and 5 variables.

	     name               type diameter rotation rings
	1 Mercury Terrestrial planet    0.382    58.64 FALSE
	2   Venus Terrestrial planet    0.949  -243.02 FALSE
	3   Earth Terrestrial planet    1.000     1.00 FALSE
	4    Mars Terrestrial planet    0.532     1.03 FALSE
	5 Jupiter          Gas giant   11.209     0.41  TRUE
	6  Saturn          Gas giant    9.449     0.43  TRUE
	7  Uranus          Gas giant    4.007    -0.72  TRUE
	8 Neptune          Gas giant    3.883     0.67  TRUE


       > str(planets_df)   # The planets_df data frame should have 8 observations and 5 variables.
       O/P:
         data.frame':	8 obs. of  5 variables:
	 $ name    : Factor w/ 8 levels "Earth","Jupiter",..: 4 8 1 3 2 6 7 5
	 $ type    : Factor w/ 2 levels "Gas giant","Terrestrial planet": 2 2 2 2 1 1 1 1
	 $ diameter: num  0.382 0.949 1 0.532 11.209 ...
	 $ rotation: num  58.64 -243.02 1 1.03 0.41 ...
	 $ rings   : logi  FALSE FALSE FALSE FALSE TRUE TRUE ... 


** Selection of data frame elements
   ----------------------------------------------------
   Similar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ].
   By using a comma, you can indicate what to select from the rows and the columns respectively. For example:

  --> my_df[1,2] selects the value at the first row and select element in my_df.
  --> my_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.
  --> Sometimes you want to select all elements of a row or column. For example, my_df[1, ]

  Ex:
	  > planets_df
	     name               type diameter rotation rings
	1 Mercury Terrestrial planet    0.382    58.64 FALSE
	2   Venus Terrestrial planet    0.949  -243.02 FALSE
	3   Earth Terrestrial planet    1.000     1.00 FALSE
	4    Mars Terrestrial planet    0.532     1.03 FALSE
	5 Jupiter          Gas giant   11.209     0.41  TRUE
	6  Saturn          Gas giant    9.449     0.43  TRUE
	7  Uranus          Gas giant    4.007    -0.72  TRUE
	8 Neptune          Gas giant    3.883     0.67  TRUE
        
	># Print out diameter of Mercury (row 1, column 3)
        >planets_df[1,3]

	># Print out data for Mars (entire fourth row)
        >planets_df[4,]

	># Select first 5 values of diameter column
        >planets_df[1:5,3]

	>planets_df[1:3,"type"]   # We can specify column names also

	>planets_df[,3]
        >planets_df[,"diameter"]   both will print same result
   
        Short-cut to the above methpd:
	-------------------------------
	> planets_df$diameter


	Ex:
	 # Select the rings variable from planets_df
	 rings_vector <- planets_df$rings
	  
	 # Print out rings_vector
	 rings_vector

	 O/P:
	> # Select the rings variable from planets_df
	> rings_vector <- planets_df$rings
	
	> # Print out rings_vector
	> rings_vector
	[1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE

	> planets_df[rings_vector, ]
	     name      type diameter rotation rings
	5 Jupiter Gas giant   11.209     0.41  TRUE
	6  Saturn Gas giant    9.449     0.43  TRUE
	7  Uranus Gas giant    4.007    -0.72  TRUE
	8 Neptune Gas giant    3.883     0.67  TRUE


subset() function as a short-cut to do exactly the same as what you did in the previous exercises.

subset(my_df, subset = some_condition)

The first argument of subset() specifies the data set for which you want a subset. By adding the second argument, 
you give R the necessary information and conditions to select the correct subset.

The code below will give the exact same result as you got in the previous exercise, but this time, you didn't need the rings_vector!

subset(planets_df, subset = rings)

O/P:
     name      type diameter rotation rings
5 Jupiter Gas giant   11.209     0.41  TRUE
6  Saturn Gas giant    9.449     0.43  TRUE
7  Uranus Gas giant    4.007    -0.72  TRUE
8 Neptune Gas giant    3.883     0.67  TRUE

# Select planets with diameter < 1
> subset(planets_df,subset=diameter < 1)
     name               type diameter rotation rings
1 Mercury Terrestrial planet    0.382    58.64 FALSE
2   Venus Terrestrial planet    0.949  -243.02 FALSE
4    Mars Terrestrial planet    0.532     1.03 FALSE


** Sorting
   -------------------------------
   In data analysis you can sort your data according to a certain variable in the data set. In R, this is done with the help of the function order().

order() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:

> a <- c(100, 10, 1000)
> order(a)
[1] 2 1 3

10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 100, which is the first element in a is the second smallest element, so 1 comes second in the output of order(a).

This means we can use the output of order(a) to reshuffle a:

> a[order(a)]
[1]   10  100 1000

Ex:
# Call order() on planets_df$diameter (the diameter column of planets_df). Store the result as positions.
positions <-  order(planets_df$diameter)

# Use positions to sort planets_df.Now reshuffle planets_df with the positions vector as row indexes inside square brackets. Keep all columns.
planets_df[positions,]


