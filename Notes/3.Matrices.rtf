** Matrix
   --------------------------------------------------------------
In R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. 
Since you are only working with rows and columns, a matrix is called two-dimensional.

You can construct a matrix in R with the matrix() function. Consider the following example:

Ex: matrix(1:9, byrow = TRUE, nrow = 3)

In the matrix() function:

* The first argument is the collection of elements that R will arrange into the rows and columns of the matrix.
  Here, we use 1:9 which is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9).

* The argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place byrow = FALSE.

* The third argument nrow indicates that the matrix should have three rows.

Ex: 1
> matrix(1:9, byrow = TRUE, nrow = 3)      # matrix is filled by the rows
O/P:
---
      [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9

Ex: 2
> matrix(1:9, byrow = FALSE, nrow = 3)      # matrix is filled by the columns
O/P:
---
      [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9

Ex: 3
-----
# Box office Star Wars (in millions!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)

# Create box_office vector by combining the three vectors into one vector
box_office <- c(new_hope, empire_strikes, return_jedi)

# Construct star_wars_matrix  with 3 rows, where each row represents a movie
star_wars_matrix <- matrix(box_office, byrow=TRUE, nrow=3)

# print
print(star_wars_matrix)


** Naming a matrix
   ----------------------------------------
   Similar to vectors, you can add names for the rows and the columns of a matrix with rownames() and colnames() functions

   rownames(my_matrix) <- row_names_vector
   colnames(my_matrix) <- col_names_vector

   Ex:
        # Box office Star Wars (in millions!)
	new_hope <- c(460.998, 314.4)
	empire_strikes <- c(290.475, 247.900)
	return_jedi <- c(309.306, 165.8)

	# Construct matrix
	star_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi), nrow = 3, byrow = TRUE)

	# Vectors region and titles, used for naming
	region <- c("US", "non-US")
	titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")

	# Name the columns with region
	colnames(star_wars_matrix) <- region

	# Name the rows with titles
	rownames(star_wars_matrix) <- titles

	# Print out star_wars_matrix
	print(star_wars_matrix)

	O/P:
	                        US       non-US
	A New Hope              460.998  314.4
	The Empire Strikes Back 290.475  247.9
	Return of the Jedi      309.306  165.8


** Calculate RowSUm using rowSums() function:
   -------------------------------------------
   In R, the function rowSums() conveniently calculates the totals for each row of a matrix. 
   
   This function creates a new vector:  rowSums(my_matrix)

   Ex:
        # Construct star_wars_matrix
	box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
	star_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE,
				   dimnames = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"), 
						   c("US", "non-US")))

	# Calculate worldwide box office figures
	worldwide_vector <- rowSums(star_wars_matrix)
	print(worldwide_vector)

	O/P: [row sums]
	     A New Hope         The Empire Strikes Back      Return of the Jedi 
                775.398                 538.375                 475.106


** Calculate RowSUm using rowSums() function:
   -------------------------------------------
   In R, the function colSums() conveniently calculates the totals for each row of a matrix. 
   
   This function creates a new vector:  rowSums(my_matrix)

   Ex:
        > all_wars_matrix
				 US    non-US
	A New Hope              461.0  314.4
	The Empire Strikes Back 290.5  247.9
	Return of the Jedi      309.3  165.8
	The Phantom Menace      474.5  552.5
	Attack of the Clones    310.7  338.7
	Revenge of the Sith     380.3  468.5

	> # Total revenue for US and non-US
	> total_revenue_vector <- colSums(all_wars_matrix)

	> # Print out total_revenue_vector
	> total_revenue_vector
	    US   non-US 
	  2226.3 2087.8


** Adding a column
   -------------------------------------
   You can add a column or multiple columns to a matrix with the cbind() function, which merges matrices and/or vectors together by column. 
   
   For example:  big_matrix <- cbind(matrix1, matrix2, vector1 ...)

   Ex:  # Construct star_wars_matrix
	box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
	star_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE,
				   dimnames = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"), 
						   c("US", "non-US")))

	# The worldwide box office figures
	worldwide_vector <- rowSums(star_wars_matrix)

	# Bind the new variable worldwide_vector as a column to star_wars_matrix
	all_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)
	
	# Print
	print(all_wars_matrix)

	O/P:                              US    non-US       worldwide_vector
		A New Hope              460.998  314.4          775.398
		The Empire Strikes Back 290.475  247.9          538.375
		Return of the Jedi      309.306  165.8          475.106


** Adding a row
   --------------------------------------
    You can add a rows or multiple rows to a matrix with the rbind() function

    Ex:
        > star_wars_matrix
				  US   non-US
	A New Hope              461.0  314.4
	The Empire Strikes Back 290.5  247.9
	Return of the Jedi      309.3  165.8

	> star_wars_matrix2
			      US    non-US
	The Phantom Menace   474.5  552.5
	Attack of the Clones 310.7  338.7
	Revenge of the Sith  380.3  468.5

	> # Combine both Star Wars trilogies in one matrix
	> all_wars_matrix <- rbind(star_wars_matrix,star_wars_matrix2)
	> all_wars_matrix
				   US non-US
	A New Hope              461.0  314.4
	The Empire Strikes Back 290.5  247.9
	Return of the Jedi      309.3  165.8
	The Phantom Menace      474.5  552.5
	Attack of the Clones    310.7  338.7
	Revenge of the Sith     380.3  468.5


** Selection of matrix elements
   ----------------------------
   Similar to vectors, you can use the square brackets [ ] to select one or multiple elements from a matrix.
   Whereas vectors have one dimension, matrices have two dimensions. You should therefore use a comma to separate 
   that what to select from the rows from that what you want to select from the columns. 
   
   For example:
   --> my_matrix[1,2] selects the element at the first row and second column.
   --> my_matrix[1:3,2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.

   If you want to select all elements of a row or a column, no number is needed before or after the comma, respectively:

   --> my_matrix[,1] selects all elements of the first column.
   --> my_matrix[1,] selects all elements of the first row.

   Ex:
      # all_wars_matrix is available in your workspace
	all_wars_matrix

	# Select the non-US revenue for all movies (the entire second column of all_wars_matrix), store the #result as 
	non_us_all <- all_wars_matrix[,2]
	  
	# Average non-US revenue
	mean(non_us_all)
	  
	# Select the non-US revenue for first two movies
	non_us_some <- all_wars_matrix[1:2,2]
	  
	# Average non-US revenue for first two movies
	mean(non_us_some)


	O/P:
	> all_wars_matrix
				   US  non-US
	A New Hope              461.0  314.4
	The Empire Strikes Back 290.5  247.9
	Return of the Jedi      309.3  165.8
	The Phantom Menace      474.5  552.5
	Attack of the Clones    310.7  338.7
	Revenge of the Sith     380.3  468.5

	> # Select the non-US revenue for all movies (the entire second column of all_wars_matrix), store the #result as
	> non_us_all <- all_wars_matrix[,2]

	> # Average non-US revenue
	> mean(non_us_all)
	[1] 347.9667

	> # Select the non-US revenue for first two movies
	> non_us_some <- all_wars_matrix[1:2,2]

	> # Average non-US revenue for first two movies
	> mean(non_us_some)
	[1] 281.15


** Arithmetic with matrices
   ------------------------------------------
  Similar to vectors, the standard operators like +, -, /, *, etc. work in an element-wise way on matrices in R.

  For example, 2 * my_matrix multiplies each element of my_matrix by two.

  Ex: 
        > all_wars_matrix
				   US non-US
	A New Hope              461.0  314.4
	The Empire Strikes Back 290.5  247.9
	Return of the Jedi      309.3  165.8
	The Phantom Menace      474.5  552.5
	Attack of the Clones    310.7  338.7
	Revenge of the Sith     380.3  468.5
	
	> # Estimate the visitors by divide all_wars_matrix by 5, giving you the number of visitors in millions. Assign the resulting matrix to visitors
	> visitors <- all_wars_matrix / 5
	
	> # Print the estimate to the console
	> print(visitors)
				   US non-US
	A New Hope              92.20  62.88
	The Empire Strikes Back 58.10  49.58
	Return of the Jedi      61.86  33.16
	The Phantom Menace      94.90 110.50
	Attack of the Clones    62.14  67.74
	Revenge of the Sith     76.06  93.70

Just like 2 * my_matrix multiplied every element of my_matrix by two, my_matrix1 * my_matrix2 creates a matrix 
where each element is the  product of the corresponding elements in my_matrix1 and my_matrix2.

Ex:

	> all_wars_matrix
				   US non-US
	A New Hope              461.0  314.4
	The Empire Strikes Back 290.5  247.9
	Return of the Jedi      309.3  165.8
	The Phantom Menace      474.5  552.5
	Attack of the Clones    310.7  338.7
	Revenge of the Sith     380.3  468.5
	
	> ticket_prices_matrix
				 US non-US
	A New Hope              5.0    5.0
	The Empire Strikes Back 6.0    6.0
	Return of the Jedi      7.0    7.0
	The Phantom Menace      4.0    4.0
	Attack of the Clones    4.5    4.5
	Revenge of the Sith     4.9    4.9
	
	> # Estimated number of visitors by divide all_wars_matrix by ticket_prices_matrix to get the estimated number of US and non-US visitors for the six movies
	> visitors <- all_wars_matrix  / ticket_prices_matrix
	
	> # From the visitors matrix, select the entire first column, representing the number of visitors in the US
	> us_visitors <- visitors[,1]
	
	> # Average number of US visitors
	> mean(us_visitors)
	[1] 75.01401
